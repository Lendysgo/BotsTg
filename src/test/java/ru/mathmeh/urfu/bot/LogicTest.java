package ru.mathmeh.urfu.bot;

import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;


public class LogicTest {
    private Logic logic;

    @Before
    public void setUp() {
        logic = new Logic();
    }
    /**
     * Tests the /start command. Ensures that the correct welcome message is returned by the Logic object.
     */
    @Test
    public void testStartCommand() {
        String response = logic.handleMessage("/start");
        assertEquals("Hello, I'm a simple note bot.", response);
    }
    /**
     * Tests the /help command. Checks if the proper help message is returned by the Logic object.
     */
    @Test
    public void testHelpCommand() {
        String response = logic.handleMessage("/help");
        assertEquals("I'm a bot for managing notes. You can add, edit, delete, and view your notes.", response);
    }
    /**
     * Tests the /add command under normal conditions. Verifies if the correct acknowledgment message has been returned after adding a note.
     */
    @Test
    public void testAddCommand() {
        String response = logic.handleMessage("/add Test Note");
        assertEquals("Note added!", response);
    }
    /**
     * Tests the /add command without any text following it. Ascertains that the Logic object prompts for text to be added.
     */
    @Test
    public void testAddCommandWithoutText() {
        String response = logic.handleMessage("/add");
        assertEquals("Please provide a text for the note.", response);
    }
    /**
     * Tests the /table command. Checks if the note list generated by the Logic object contains an expected string.
     */
    @Test
    public void testTableCommand() {
        String response = logic.handleMessage("/table");
        assertTrue(response.contains("Your notes:"));
    }
    /**
     * Tests the /edit command in a normal scenario. Validates if the correct acknowledgment message is returned after editing a note.
     */
    @Test
    public void testEditCommand() {
        logic.handleMessage("/add Test Note");
        String response = logic.handleMessage("/edit 1 New Text");
        assertEquals("Note edited!", response);
    }
    /**
     * Tests the /edit command with an invalid ID. Ensures that the Logic object gives the proper error message when provided an invalid ID.
     */
    @Test
    public void testEditCommandInvalidId() {
        String response = logic.handleMessage("/edit not_an_integer New Text");
        assertEquals("Invalid note ID.", response);
    }
    /**
     * Tests the /del command under normal conditions. Verifies if the correct acknowledgment message has been returned after deletion of a note.
     */
    @Test
    public void testDeleteCommand() {
        logic.handleMessage("/add Test Note");
        String response = logic.handleMessage("/del 1");
        assertEquals("Note deleted!", response);
    }
    /**
     * Tests the /del command with an invalid ID. Ensures that the Logic object gives the proper error message when provided an invalid ID.
     */
    @Test
    public void testDeleteCommandInvalidId() {
        String response = logic.handleMessage("/del not_an_integer");
        assertEquals("Invalid note ID.", response);
    }
    /**
     * Tests any unknown command. Checks if the Logic object returns the correct message when an unrecognized command is received.
     */
    @Test
    public void testUnknownCommand() {
        String response = logic.handleMessage("/unknown");
        assertEquals("I don't understand the command.", response);
    }
}