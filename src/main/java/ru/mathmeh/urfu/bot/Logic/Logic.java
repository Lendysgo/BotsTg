package ru.mathmeh.urfu.bot.Logic;

import ru.mathmeh.urfu.bot.Categories;
import ru.mathmeh.urfu.bot.Notes.Note;
import ru.mathmeh.urfu.bot.Notes.NoteManager;
import ru.mathmeh.urfu.bot.Printer;
import ru.mathmeh.urfu.bot.Reminder;
import ru.mathmeh.urfu.bot.TelegramBot;

import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;


/**
 * This class implements the bot logic
 * @author lendys(Yaroslav Prisepnyj)
 * @version 1.0
 */
public class Logic {
    private final NoteManager noteManager;
    private final Categories categories;
    private final Printer printer;
    private final Reminder reminder;
    private final ScheduledExecutorService executorService;

    public Logic() {
        noteManager = new NoteManager();
        categories = new Categories();
        printer = new Printer();
        reminder = new Reminder();
        executorService = Executors.newScheduledThreadPool(1);
        initReminderScheduler();
    }

    private void initReminderScheduler() {
        executorService.scheduleAtFixedRate(() -> {
            Map<String, List<String>> reminders = reminder.getReminders();

            for (Map.Entry<String, List<String>> entry : reminders.entrySet()) {
                String chatId = entry.getKey();
                List<String> messages = entry.getValue();

                for (String message : messages) {
                    sendReminder(chatId, message);
                }
            }
        }, 0, 1, TimeUnit.MINUTES);
    }

    private void sendReminder(String chatId, String message) {
        // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —á–∞—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º TelegramBot
        TelegramBot.getInstance().sendMessage(Long.parseLong(chatId), message);
    }
    /**
     * This method realizes cross-platform logic of the bot
     * @param message text of user's message
     * @return text of bot message
     */
    public String handleMessage(String message) {
        String[] pars = message.split(" ");
        String[] parsedCommand = parseCommand(message);
        String command = parsedCommand[0];
        String firstArgument = parsedCommand[1];
        String secondArgument = parsedCommand[2];
        String thirdArgument = parsedCommand[3];

        switch (command) {
            case "start":
                return "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–µ–π. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å, —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –∑–∞–ø–∏—Å—è–º–∏.\n" +
                        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /help";
            case "help":
                return """
                        –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
                        /add - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                        /edit -–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                        /del - —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                        /added <> to <> - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üì©
                        /create_category - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üìÅ
                        /list_categories - —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π üóÇ
                        /delete_category - —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚ùå
                        /edit_category - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚úèÔ∏è
                        /list_notes - –≤—ã–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –µ—ë —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è üìö
                        """;
            case "add":
                if (pars.length >= 2) {
                    String text = message.substring(command.length() + 1);
                    noteManager.addNote(text);
                    return "–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞^_^";
                } else {
                    return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø–∏—Å—å.";
                }
            case "edit":
                if (pars.length >= 2) {
                    try {
                        int id = Integer.parseInt(parsedCommand[1]);
                        String text = message.substring(command.length() + 2 + parsedCommand[1].length());
                        noteManager.editNote(id, text);
                        return "–ó–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∞!";
                    } catch (NumberFormatException e) {
                        return "–ù–µ—Ä–µ–≤–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏.";
                    }
                } else {
                    return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è";
                }
            case "del":
                if (pars.length >= 2) {
                    try {
                        int id = Integer.parseInt(parsedCommand[1]);
                        noteManager.deleteNote(id);
                        return "–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!";
                    } catch (NumberFormatException e) {
                        return "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏.";
                    }
                } else {
                    return "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.";
                }
            case  "table":
                List <Note> notes = noteManager.getNotes();
                StringBuilder response = new StringBuilder("–í–æ—Ç –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n");
                for (Note note : notes) {
                    response.append(note.getId()).append(".").append(note.getText()).append("\n");
                }
                return response.toString();
            case "added":
                if (!firstArgument.isEmpty()) {
                    categories.addNoteToCategory(firstArgument,secondArgument);
                    return "–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é!";
                } else {
                    return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø–∏—Å—å.";
                }

            case "create_category":
                if (!firstArgument.isEmpty()) {
                    categories.createCategory(firstArgument);
                    return "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞, –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –Ω–µ–µ –∑–∞–º–µ—Ç–∫–∏.";
                } else {
                    return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.";
                }

            case "list_categories":
                return categories.listCategories();

            case "delete_category":
                if (!firstArgument.isEmpty()) {
                    categories.deleteCategory(firstArgument);
                    return "–ö–∞—Ç–µ–≥–æ—Ä–∏—è \"" + firstArgument + "\" —É–¥–∞–ª–µ–Ω–∞.";
                } else {
                    return "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.";
                }

            case "edit_category":
                if (!firstArgument.isEmpty() && !secondArgument.isEmpty()) {
                    categories.editCategory(firstArgument, secondArgument);
                    return "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.";
                } else {
                    return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ä–æ–µ –∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.";
                }
            case "list_notes":
                if (!firstArgument.isEmpty()) {
                    List<String> notesInCategory = categories.getNotesInCategory(firstArgument);
                    String res = "–ó–∞–ø–∏—Å–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"" + firstArgument + "\":\n";
                    List<String> formattedNotes = new ArrayList<>();

                    for (String note : notesInCategory) {
                        formattedNotes.add("- " + note);
                    }

                    return res + printer.makeString(formattedNotes, false);
                } else {
                    return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π.";
                }
            case "time_category":
                if (!firstArgument.isEmpty() &&
                        !secondArgument.isEmpty() && !thirdArgument.isEmpty()) {
                    // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    reminder.set_category_reminder(
                            firstArgument, secondArgument, thirdArgument);
                    return "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 12:00";
                } else {
                    return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –¥–∞—Ç—É.";
                }
            case "time_note":
                if (!firstArgument.isEmpty() &&
                        !secondArgument.isEmpty() && !thirdArgument.isEmpty()) {
                    // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
                    reminder.set_note_reminder(firstArgument, secondArgument, thirdArgument);
                    return "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 12:00";
                } else {
                    return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø–∏—Å—å –∏ –¥–∞—Ç—É.";
                }
            case "delete_time_category":
                if (!firstArgument.isEmpty()) {
                    // –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    reminder.deleteReminder();
                    return "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ";
                } else {
                    return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.";
                }
            case "delete_time_note":
                if (!firstArgument.isEmpty()) {
                    // –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
                    reminder.deleteReminder();
                    return "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ";
                } else {
                    return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.";
                }
            default:
                return "–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ –Ω–µ –≤–µ—Ä–Ω–∞. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help.";
        }
    }

    /**
     * Parses a command with arguments.
     * @param message The user's message.
     * @return An array with the command and its arguments.
     */
    private String[] parseCommand(String message) {
        String[] words = message.trim().split("\\s+");

        String[] parsedCommand = new String[4];
        parsedCommand[0] = "";  // Command
        parsedCommand[1] = "";  // First argument
        parsedCommand[2] = "";  // Second argument
        parsedCommand[3] = "";  // Date

        if (words.length > 0) {
            parsedCommand[0] = words[0].replace("/", "");  // –£–±–∏—Ä–∞–µ–º "/"
        }

        if (words.length > 1) {
            parsedCommand[1] = words[1];
        }

        if (words.length > 2 && words[2].equalsIgnoreCase("to")) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å "to", –∏ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –Ω–µ —Ä–∞–≤–Ω–æ "to"
            if (words.length > 3) {
                parsedCommand[2] = words[3];
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å–ª–æ–≤–æ (–¥–∞—Ç–∞)
            if (words.length > 4) {
                parsedCommand[3] = String
                        .join(" ", Arrays.copyOfRange(words, 4, words.length));
            }
        }
        return parsedCommand;
    }

    public String getCurrentChatId() {
        // –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ –ª–æ–≥–∏–∫—É, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π chatId
        return "–≤–∞—à_chat_id";
    }

}

