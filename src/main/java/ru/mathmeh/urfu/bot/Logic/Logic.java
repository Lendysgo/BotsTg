package ru.mathmeh.urfu.bot.Logic;

import ru.mathmeh.urfu.bot.Categories;
import ru.mathmeh.urfu.bot.Notes.Note;
import ru.mathmeh.urfu.bot.Notes.NoteManager;

import java.util.Arrays;
import java.util.List;

/**
 * This class implements the bot logic
 * @author lendys(Yaroslav Prisepnyj)
 * @version 1.0
 */
public class Logic {
    NoteManager noteManager;
    Categories categories;

    public Logic(){
        noteManager = new NoteManager();
        categories = new Categories();
    }

    /**
     * This method realizes cross-platform logic of the bot
     * @param message text of user's message
     * @return text of bot message
     */
    public String handleMessage(String message) {
        String[] parsedCommand = parseCommand(message);
        String command = parsedCommand[0];
        String firstArgument = parsedCommand[1];
        String secondArgument = parsedCommand[2];

        switch ("/" + command) {
            case "/start":
                return "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–µ–π. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å, —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –∑–∞–ø–∏—Å—è–º–∏.\n" +
                        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /help";
            case "/help":
                return """
                        –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
                        /add - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ üì©
                        /create_category - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üìÅ
                        /list_categories - —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π üóÇ
                        /delete_category - —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚ùå
                        /edit_category - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚úèÔ∏è
                        /list_notes - –≤—ã–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –µ—ë —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è üìö
                        """;

            case "/add":
                if (!firstArgument.isEmpty()) {
                    categories.addNoteToCategory(firstArgument,secondArgument);
                    return "–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!";
                } else {
                    return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø–∏—Å—å.";
                }

            case "/create_category":
                if (!firstArgument.isEmpty()) {
                    categories.createCategory(firstArgument);
                    return "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞, –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –Ω–µ–µ –∑–∞–º–µ—Ç–∫–∏.";
                } else {
                    return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.";
                }

            case "/list_categories":
                return categories.listCategories();

            case "/delete_category":
                if (!firstArgument.isEmpty()) {
                    categories.deleteCategory(firstArgument);
                    return "–ö–∞—Ç–µ–≥–æ—Ä–∏—è \"" + firstArgument + "\" —É–¥–∞–ª–µ–Ω–∞.";
                } else {
                    return "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.";
                }

            case "/edit_category":
                if (!firstArgument.isEmpty() && !secondArgument.isEmpty()) {
                    categories.editCategory(firstArgument, secondArgument);
                    return "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.";
                } else {
                    return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ä–æ–µ –∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.";
                }
            case "/list_notes":
                if (!firstArgument.isEmpty()) {
                    String categoryName = firstArgument;
                    List<String> notesInCategory = categories.getNotesInCategory(categoryName);
                    StringBuilder response = new StringBuilder("–ó–∞–ø–∏—Å–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"" + categoryName + "\":\n");

                    for (String note : notesInCategory) {
                        response.append("- ").append(note).append("\n");
                    }

                    return response.toString();
                } else {
                    return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π.";
                }

            default:
                return "–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ –Ω–µ –≤–µ—Ä–Ω–∞. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help.";
        }
    }

    /**
     * Parses a command with arguments.
     * @param message The user's message.
     * @return An array with the command and its arguments.
     */
    private String[] parseCommand(String message) {
        String[] words = message.trim().split("\\s+");

        String[] parsedCommand = new String[3];
        parsedCommand[0] = "";  // Command
        parsedCommand[1] = "";  // First argument
        parsedCommand[2] = "";  // Second argument

        if (words.length > 0) {
            parsedCommand[0] = words[0].substring(1);  // –£–±–∏—Ä–∞–µ–º "/"
        }

        if (words.length > 1) {
            parsedCommand[1] = words[1];
        }

        if (words.length > 2 && words[2].equalsIgnoreCase("to")) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å "to", –∏ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –Ω–µ —Ä–∞–≤–Ω–æ "to"
            if (words.length > 3) {
                parsedCommand[2] = String.join(" ", Arrays.copyOfRange(words, 3, words.length));
            }
        }
        return parsedCommand;
    }

}
